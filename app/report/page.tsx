"use client";

import Link from "next/link";
import FlightBriefLogo from "@/components/FlightBriefLogo";
import { useState } from "react";
import { cookieService } from "@/lib/cookieService";

export default function Report() {
  const [aircraftId, setAircraftId] = useState("");
  const [reportData, setReportData] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [reportName, setReportName] = useState("");
  const [saveMessage, setSaveMessage] = useState("");

  const handleProcess = () => {
    if (!aircraftId.trim()) return;
    
    setIsProcessing(true);
    // Simulate processing - in the future this will call your LLM
    setTimeout(() => {
      const generatedReport = `Flight Report for Aircraft: ${aircraftId}

Generated on: ${new Date().toLocaleString()}

AIRCRAFT INFORMATION:
- Tail Number/Hex ID: ${aircraftId}
- Status: Active
- Last Inspection: ${new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toLocaleDateString()}

FLIGHT OPERATIONS SUMMARY:
This aircraft has been operating within normal parameters. Recent flight data indicates consistent performance metrics across all operational categories.

MAINTENANCE STATUS:
All scheduled maintenance items are current. No outstanding airworthiness directives or service bulletins require immediate attention.

RECOMMENDATIONS:
Continue normal operations with standard monitoring protocols. Next scheduled inspection due within 30 days.

Report generated by FlightBrief AI - Aviation Intelligence System`;
      
      setReportData(generatedReport);
      setReportName(`Flight Report - ${aircraftId} - ${new Date().toLocaleDateString()}`);
      setIsProcessing(false);
    }, 2000);
  };

  const handleSave = () => {
    if (!reportData.trim() || !reportName.trim()) {
      setSaveMessage("Please ensure both report name and data are available");
      setTimeout(() => setSaveMessage(""), 3000);
      return;
    }

    const reportId = `report_${Date.now()}_${aircraftId}`;
    const success = cookieService.createCookie(reportId, reportName, reportData);
    
    if (success) {
      setSaveMessage("Report saved successfully!");
      setTimeout(() => setSaveMessage(""), 3000);
    } else {
      setSaveMessage("Failed to save report");
      setTimeout(() => setSaveMessage(""), 3000);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-50 to-blue-100 dark:from-gray-900 dark:to-blue-900">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <FlightBriefLogo 
                size="md"
                className="text-blue-600 dark:text-blue-400"
              />
              <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
                FlightBrief AI
              </h1>
            </div>
            <Link
              href="/dashboard"
              className="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-500 dark:hover:text-blue-300"
            >
              ‚Üê Back to Dashboard
            </Link>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Title */}
        <div className="mb-8">
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white">
            Create Flight Report
          </h2>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            Enter aircraft information to generate a comprehensive flight report
          </p>
        </div>

        {/* Input Section */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6">
          <div className="mb-4">
            <label htmlFor="aircraft-id" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Aircraft Tail Number or Hex ID
            </label>
            <div className="flex gap-3">
              <input
                id="aircraft-id"
                type="text"
                value={aircraftId}
                onChange={(e) => setAircraftId(e.target.value)}
                placeholder="e.g., N123AB or A1B2C3"
                className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              />
              <button
                onClick={handleProcess}
                disabled={!aircraftId.trim() || isProcessing}
                className="px-6 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 dark:bg-blue-500 dark:hover:bg-blue-600 dark:disabled:bg-gray-600 text-white font-medium rounded-md shadow-sm transition-colors duration-200 disabled:cursor-not-allowed"
              >
                {isProcessing ? "Processing..." : "Process"}
              </button>
            </div>
          </div>
        </div>

        {/* Report Output Section */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">
              Report Output
            </h3>
            {reportData && (
              <div className="flex items-center space-x-3">
                {saveMessage && (
                  <span className={`text-sm ${saveMessage.includes('success') ? 'text-green-600' : 'text-red-600'}`}>
                    {saveMessage}
                  </span>
                )}
                <button
                  onClick={handleSave}
                  disabled={!reportData.trim() || !reportName.trim()}
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 dark:bg-blue-500 dark:hover:bg-blue-600 dark:disabled:bg-gray-600 text-white text-sm font-medium rounded-md shadow-sm transition-colors duration-200 disabled:cursor-not-allowed"
                >
                  SAVE REPORT
                </button>
              </div>
            )}
          </div>
          
          {reportData && (
            <div className="mb-4">
              <label htmlFor="report-name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Report Name
              </label>
              <input
                id="report-name"
                type="text"
                value={reportName}
                onChange={(e) => setReportName(e.target.value)}
                placeholder="Enter a name for this report..."
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              />
            </div>
          )}
          
          <textarea
            value={reportData}
            readOnly
            placeholder="Report data will appear here after processing..."
            rows={12}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white resize-none"
          />
        </div>
      </div>
    </div>
  );
}
